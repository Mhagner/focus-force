generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Priority {
  alta
  media
  baixa
}

enum Status {
  todo
  doing
  done
}

enum SessionType {
  manual
  pomodoro
}

model Project {
  id                String           @id @default(cuid())
  name              String
  client            String?
  color             String
  hourlyRate        Decimal?         @db.Decimal(10, 2)
  active            Boolean          @default(true)
  createdAt         DateTime         @default(now())
  tasks             Task[]
  sessions          FocusSession[]
  blocks            DailyPlanBlock[]
  clockfyClientId   String?
  clockfyProjectId  String?
  syncWithClockfy   Boolean          @default(false)
  salesforceOppUrl      String?
  sharepointRepoUrl     String?
  estimatedDeliveryDate DateTime?
}

model Task {
  id          String         @id @default(cuid())
  project     Project        @relation(fields: [projectId], references: [id])
  projectId   String
  title       String
  description String?
  priority    Priority       @default(media)
  plannedFor  String?
  status      Status         @default(todo)
  estimateMin Int?
  createdAt   DateTime       @default(now())
  sessions    FocusSession[]
  comments    TaskComment[]
}

model TaskComment {
  id        String   @id @default(cuid())
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String
  message   String
  createdAt DateTime @default(now())
}

model FocusSession {
  id             String      @id @default(cuid())
  project        Project     @relation(fields: [projectId], references: [id])
  projectId      String
  task           Task?       @relation(fields: [taskId], references: [id])
  taskId         String?
  start          DateTime
  end            DateTime?
  durationSec    Int
  type           SessionType
  pomodoroCycles Int?
  notes          String?
  clockfyTimeEntryId String?
}

model DailyPlan {
  id     String           @id @default(cuid())
  date   DateTime
  notes  String?
  blocks DailyPlanBlock[]
}

model DailyPlanBlock {
  id            String    @id @default(cuid())
  dailyPlan     DailyPlan @relation(fields: [dailyPlanId], references: [id])
  dailyPlanId   String
  project       Project   @relation(fields: [projectId], references: [id])
  projectId     String
  targetMinutes Int
}

model PomodoroSettings {
  id               String  @id @default(cuid())
  workMin          Int
  shortBreakMin    Int
  longBreakMin     Int
  cyclesToLongBreak Int
  autoStartNext    Boolean
  soundOn          Boolean
}

model ClockfySettings {
  id           String   @id @default(cuid())
  apiKey       String?
  workspaceId  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
